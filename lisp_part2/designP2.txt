LISP Interpreter Part 2Rupam KunduFirst Year Graduate StudentThe Ohio State UniversityEmail : kundu.24@osu.edu------------------------------------------------------Objective: This is the second part of the interpreter project. This will read in an input s-expression in either dot or list notation (or both), converts it into the appropriate internal representation, evaluates the input expression through interpreter and outputs it. This will consist mainly of the Lisp expression evaluator , i.e., eval[] and associated functions. Language Used : C++.Implementation Overview:         1. Accepts input strings via "main.cpp" till it gets a "$" or "$$" as input.                2. Break down into Tokens/valid strings with allowed set of characters using "Lisp_Token.cpp".                   3."Lisp_Parse.cpp" creates a binary parse tree using the valid tokens obtained from the previous step. Additionally it also converts any lower case to upper case letters.          4. "SExp.cpp" defines the different classes and exression types.          5. "Interpreter.cpp" evaluates the expression returned by "Lisp_parse.cpp".         6. Output() gives the dotted notation of the evaluated input returned by "Interpreter.cpp".         7. Additionally Output_Dot_notation() gives the dotted notation of the input.